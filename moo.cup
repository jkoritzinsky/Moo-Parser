/**********************************************************************
 Java CUP specification for a parser for moo programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;
terminal                UMINUS;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal FnDeclNode       fnDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       varDeclList;
non terminal ExpNode          loc;
non terminal FormalsListNode  formals;
non terminal LinkedList<FormalDeclNode>  formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal LinkedList<DeclNode> structBody;
non terminal StmtNode         stmt;
non terminal ExpNode exp;
non terminal AssignNode assignExp;
non terminal ExpNode term;
non terminal CallExpNode fncall;
non terminal LinkedList<ExpNode> actualList;
non terminal LinkedList<StmtNode> stmtList;
 
 
/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence nonassoc OR;
precedence nonassoc AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc UMINUS, NOT;


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | structDecl:s
                {: RESULT = s;
                :}
                ;

varDeclList	::= varDeclList:vdl varDecl:vd
                {: vdl.addLast(vd);
                   RESULT = vdl;
		:}
                | /* epsilon */
                {: RESULT = new LinkedList<VarDeclNode>();
                :}
		;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(new StructNode(t), i, 0);
                :}
                ;
                
                                
structDecl      ::= STRUCT id:i LCURLY structBody:decls RCURLY SEMICOLON
                {: RESULT = new StructDeclNode(i, new DeclListNode(decls));
                :}
                ;
                
structBody      ::= structBody:body varDecl:decl
                {: body.addLast(decl);
                :}
                | varDecl:decl
                {: LinkedList<DeclNode> nodes = new LinkedList<DeclNode>();
                   nodes.addFirst(decl);
                   RESULT = nodes;
                :}
                ;
                
formals         ::= LPAREN RPAREN
                {: RESULT = new FormalsListNode(new LinkedList<>());
                :}
                | LPAREN formalsList:list RPAREN
                {: RESULT = new FormalsListNode(list);
                :}
                ;

formalsList     ::= formalDecl:fd
                {: LinkedList<FormalDeclNode> decls = new LinkedList<>();
                   decls.addFirst(fd);
                   RESULT = decls;
                :}
                | formalDecl:fd COMMA formalsList:fl
                {: fl.addFirst(fd);
                   RESULT = fl;
                :}
                ;

formalDecl      ::= type:t id:i        // note: no struct parameters
                {: RESULT = new FormalDeclNode(t,i);
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {: sl.addLast(s);
                   RESULT = sl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;

stmt            ::= assignExp:a SEMICOLON
                {: RESULT = new AssignStmtNode(a);
                :}
                | loc:l PLUSPLUS SEMICOLON
                {: RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS SEMICOLON
                {: RESULT = new PostDecStmtNode(l);
                :}
                | CIN READ loc:l SEMICOLON
                {: RESULT = new ReadStmtNode(l);
                :}
                | COUT WRITE exp:e SEMICOLON
                {: RESULT = new WriteStmtNode(e);
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:sl RCURLY
                {: RESULT = new IfStmtNode(e, vdl, sl);
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl1 stmtList:sl1 RCURLY ELSE LCURLY varDeclList:vdl2 stmtList:sl2 RCURLY
                {: RESULT = new IfElseStmtNode(e, vdl1, sl1, vdl2, sl2);
                :}
                | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:sl RCURLY
                {: RESULT = new WhileStmtNode(e, vdl, sl);
                :}
                | RETURN exp:e SEMICOLON
                {: RESULT = new ReturnStmtNode(e);
                :}
                | RETURN SEMICOLON
                {: RESULT = new ReturnStmtNode(NULL);
                :}
                | fncall:f SEMICOLON
                {: RESULT = new CallStmtNode(f);
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:r
                {: RESULT = new AssignNode(l,r);
                :}
                ;
                
exp             ::= assignExp:e
                {: RESULT = e;
                :}
                | exp:e1 PLUS exp:e2
                {: RESULT = new PlusNode(e1, e2);
                :}
                | exp:e1 MINUS exp:e2
                {: RESULT = new MinusNode(e1, e2);
                :}
                | exp:e1 TIMES exp:e2
                {: RESULT = new TimesNode(e1, e2);
                :}
                | exp:e1 DIVIDE exp:e2
                {: RESULT = new DivideNode(e1, e2);
                :}
                | NOT exp:e
                {: RESULT = new NotNode(e);
                :}
                | exp:e1 AND exp:e2
                {: RESULT = new AndNode(e1, e2);
                :}
                | exp:e1 OR exp:e2
                {: RESULT = new OrNode(e1, e2);
                :}
                | exp:e1 EQUALS exp:e2
                {: RESULT = new EqualsNode(e1, e2);
                :}
                | exp:e1 NOTEQUALS exp:e2
                {: RESULT = new NotEqualsNode(e1, e2);
                :}
                | exp:e1 LESS exp:e2
                {: RESULT = new LessNode(e1, e2);
                :}
                | exp:e1 GREATER exp:e2
                {: RESULT = new GreaterNode(e1, e2);
                :}
                | exp:e1 LESSEQ exp:e2
                {: RESULT = new LessEqNode(e1, e2);
                :}
                | exp:e1 GREATEREQ exp:e2
                {: RESULT = new GreaterEqNode(e1, e2);
                :}
                | MINUS term:t
                {: RESULT = new UnaryMinusNode(t);
                :}
                | term:t
                {: RESULT = t;
                :}
                ;

term            ::= loc:l
                {: RESULT = l;
                :}
                | INTLITERAL:i
                {: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                :}
                | STRINGLITERAL:s
                {: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                | TRUE:t
                {: RESULT = new TrueNode(t.linenum, t.charnum);
                :}
                | FALSE:f
                {: RESULT = new FalseNode(f.linenum, f.charnum);
                :}
                | LPAREN exp:e RPAREN
                {: RESULT = e;
                :}
                | fncall:call
                {: RESULT = call;
                :}
                ;

fncall          ::=  id:i LPAREN RPAREN   // fn call with no args
                {: RESULT = new CallExpNode(i);
                :}
                | id:i LPAREN actualList:l RPAREN  // with args
                {: RESULT = new CallExpNode(i, new ExpListNode(l));
                :}
                ;

actualList      ::= exp:e
                {: LinkedList<ExpNode> args = new LinkedList<>();
                   args.addFirst(e);
                   RESULT = args;
                :}
                | actualList:l COMMA exp:e
                {: l.addLast(e);
                   RESULT = l;
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;
                
loc             ::= id:i
                {: RESULT = i;
                :}
                | loc:l DOT id:i
                {: RESULT = new DotAccessExpNode(l, i);
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				
